apply plugin: 'com.android.application'
apply plugin: 'maven-publish'

version '0.9.0-SNAPSHOT'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.rex.qly"

        minSdkVersion 21
        targetSdkVersion 29

        versionName project.version
        versionCode Integer.parseInt(([ 'git','rev-list','--count','HEAD'].execute().text).trim())

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    implementation 'com.google.android.material:material:1.1.0'

    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.github.tony19:logback-android:2.0.0'

    implementation 'org.nanohttpd:nanohttpd-webserver:2.3.1'
    implementation 'org.nanohttpd:nanohttpd-websocket:2.3.1'

    testImplementation 'junit:junit:4.13'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    //testImplementation 'org.robolectric:robolectric:4.3.1'

    // Print log stdout for junit test
    //testImplementation 'ch.qos.logback:logback-core:1.2.3'
    //testImplementation 'ch.qos.logback:logback-classic:1.2.3'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Print log stdout for androidTest
    //androidTestImplementation 'com.github.tony19:logback-android:2.0.0'

    //androidTestImplementation 'androidx.test:runner:1.2.0'
    //androidTestImplementation 'androidx.test:rules:1.2.0'
    //androidTestImplementation 'org.mockito:mockito-android:3.3.3'
    //androidTestImplementation 'org.opentest4j:opentest4j:1.2.0' // mockito-android required
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        //println(“variant.name:" + variant.name)
        //println(“variant.baseName:" + variant.baseName)
        //println("variant.flavorName:" + variant.flavorName)

        if (!variant.buildType.isDebuggable()) {
            publishing.publications.create(variant.name, MavenPublication) {
                groupId "com.rex"
                artifactId "qly"

                // Since Android Gradle 3.6.0
                // Ref: https://developer.android.google.cn/studio/build/maven-publish-plugin?hl=zh-cn
                // Will generate ZIP contains APK and mapping TXT
                //from components.getByName("${variant.name}_apk")

                // Publish default APK package, for ApplicationVariant ApkVariant
                artifact (new File(variant.packageApplicationProvider.get().getOutputDirectory().getAsFile().get(), variant.outputs[0].outputFileName)) {
                    builtBy variant.assembleProvider.get()
                }

                // Publish mapping TXT
                if (!variant.getMappingFileProvider().get().isEmpty()) {
                    artifact project.tasks.create("generateMappingZipFor${name.capitalize()}Publication", Zip) {
                        classifier "mapping"
                        group "publishing"
                        baseName variant.baseName // Default ${project.name}-mapping.zip may conflict with other flavors
                        from variant.getMappingFileProvider().get()
                    }
                }

                // Publish native stack ZIP
                if (! variant.externalNativeBuildProviders.isEmpty()) {
                    artifact project.tasks.create("generateStackZipFor${name.capitalize()}Publication", Zip) {
                        classifier "stack"
                        group "publishing"
                        baseName variant.baseName // Default ${project.name}-stack.zip may conflict with other flavors
                        variant.externalNativeBuildProviders.each { provider ->
                            from provider.get().objFolder
                        }
                    }
                }
            }
        }
    }
}

task cleanWebRoot(type: Delete) {
    description = "Clean HTML contents from assets"
    group = "webapp"

    delete "src/main/assets/www.zip"
}

task archiveWebRoot(dependsOn: [cleanWebRoot], type: Zip) {
    description = "Deploy HTML contents into assets"
    group = "webapp"

    from "src/main/assets/www"

    destinationDirectory.set(new File("src/main/assets"))
    archiveFileName.set("www.zip")
}
