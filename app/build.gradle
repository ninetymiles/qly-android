apply plugin: 'com.android.application'
apply plugin: 'maven-publish'

version = '0.9.0-SNAPSHOT'

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "com.rex.qly"

        minSdkVersion 21
        targetSdkVersion 32

        versionName project.version
        versionCode Integer.parseInt(([ 'git','-C',projectDir.toString(),'rev-list','--count','HEAD'].execute().text).trim())

        buildConfigField 'String',  'DEFAULT_RTMP_SERVER_ADDRESS', '"rtmp://localhost:1935/live/1"'
        //buildConfigField 'String',  'DEFAULT_RTMP_SERVER_ADDRESS', '"file:///mnt/sdcard/sample.flv"'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //compileOptions {
    //    targetCompatibility JavaVersion.VERSION_1_8
    //    sourceCompatibility JavaVersion.VERSION_1_8
    //}

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    testOptions {
        unitTests {
            all {
                testLogging {
                    showStandardStreams true
                }
            }
            includeAndroidResources true
        }
    }
}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    implementation 'com.google.android.material:material:1.3.0'

    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'com.github.tony19:logback-android:2.0.0'

    implementation 'org.nanohttpd:nanohttpd-webserver:2.3.1'
    implementation 'org.nanohttpd:nanohttpd-websocket:2.3.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'org.mockito:mockito-core:3.4.0'
    //testImplementation 'org.robolectric:robolectric:4.3.1'

    // Print log stdout for junit test
    testImplementation 'ch.qos.logback:logback-classic:1.2.6'

    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Print log stdout for androidTest
    androidTestImplementation 'com.github.tony19:logback-android:2.0.0'

    //androidTestImplementation 'androidx.test:runner:1.2.0'
    //androidTestImplementation 'androidx.test:rules:1.2.0'
    //androidTestImplementation 'org.mockito:mockito-android:3.3.3'
    //androidTestImplementation 'org.opentest4j:opentest4j:1.2.0' // mockito-android required
}

task cleanWebRoot(type: Delete) {
    description = "Clean HTML contents from assets"
    group = "webapp"

    delete "src/main/assets/www.zip"
}

task archiveWebRoot(dependsOn: [cleanWebRoot], type: Zip) {
    description = "Deploy HTML contents into assets"
    group = "webapp"

    from "src/main/assets/www"

    destinationDirectory.set(new File("src/main/assets"))
    archiveFileName.set("www.zip")
}
